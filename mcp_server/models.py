# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T14:05:53+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, List, Optional

from pydantic import BaseModel, Field, RootModel, confloat, conint, constr


class AccessDeniedException(RootModel[Any]):
    root: Any


class BadDocumentException(RootModel[Any]):
    root: Any


class BlockType(Enum):
    KEY_VALUE_SET = 'KEY_VALUE_SET'
    PAGE = 'PAGE'
    LINE = 'LINE'
    WORD = 'WORD'
    TABLE = 'TABLE'
    CELL = 'CELL'
    SELECTION_ELEMENT = 'SELECTION_ELEMENT'
    MERGED_CELL = 'MERGED_CELL'
    TITLE = 'TITLE'
    QUERY = 'QUERY'
    QUERY_RESULT = 'QUERY_RESULT'
    SIGNATURE = 'SIGNATURE'
    TABLE_TITLE = 'TABLE_TITLE'
    TABLE_FOOTER = 'TABLE_FOOTER'


class ClientRequestToken(
    RootModel[constr(pattern=r'^[a-zA-Z0-9-_]+$', min_length=1, max_length=64)]
):
    root: constr(pattern=r'^[a-zA-Z0-9-_]+$', min_length=1, max_length=64)


class ContentClassifier(Enum):
    FreeOfPersonallyIdentifiableInformation = 'FreeOfPersonallyIdentifiableInformation'
    FreeOfAdultContent = 'FreeOfAdultContent'


class ContentClassifiers(RootModel[List[ContentClassifier]]):
    root: List[ContentClassifier] = Field(..., max_length=256)


class DocumentTooLargeException(RootModel[Any]):
    root: Any


class EntityType(Enum):
    KEY = 'KEY'
    VALUE = 'VALUE'
    COLUMN_HEADER = 'COLUMN_HEADER'
    TABLE_TITLE = 'TABLE_TITLE'
    TABLE_FOOTER = 'TABLE_FOOTER'
    TABLE_SECTION_TITLE = 'TABLE_SECTION_TITLE'
    TABLE_SUMMARY = 'TABLE_SUMMARY'
    STRUCTURED_TABLE = 'STRUCTURED_TABLE'
    SEMI_STRUCTURED_TABLE = 'SEMI_STRUCTURED_TABLE'


class EntityTypes(RootModel[List[EntityType]]):
    root: List[EntityType]


class ErrorCode(RootModel[str]):
    root: str


class FeatureType(Enum):
    TABLES = 'TABLES'
    FORMS = 'FORMS'
    QUERIES = 'QUERIES'
    SIGNATURES = 'SIGNATURES'


class FeatureTypes(RootModel[List[FeatureType]]):
    root: List[FeatureType]


class Float(RootModel[float]):
    root: float


class FlowDefinitionArn(RootModel[constr(max_length=256)]):
    root: constr(max_length=256)


class HumanLoopActivationConditionsEvaluationResults(
    RootModel[constr(max_length=10240)]
):
    root: constr(max_length=10240)


class HumanLoopActivationReason(RootModel[str]):
    root: str


class HumanLoopActivationReasons(RootModel[List[HumanLoopActivationReason]]):
    root: List[HumanLoopActivationReason] = Field(..., min_length=1)


class HumanLoopArn(RootModel[constr(max_length=256)]):
    root: constr(max_length=256)


class HumanLoopDataAttributes(BaseModel):
    ContentClassifiers_1: Optional[ContentClassifiers] = Field(
        None, alias='ContentClassifiers'
    )


class HumanLoopName(
    RootModel[constr(pattern=r'^[a-z0-9](-*[a-z0-9])*', min_length=1, max_length=63)]
):
    root: constr(pattern=r'^[a-z0-9](-*[a-z0-9])*', min_length=1, max_length=63)


class HumanLoopQuotaExceededException(RootModel[Any]):
    root: Any


class IdempotentParameterMismatchException(RootModel[Any]):
    root: Any


class ImageBlob(RootModel[constr(min_length=1, max_length=10485760)]):
    root: constr(min_length=1, max_length=10485760)


class InternalServerError(RootModel[Any]):
    root: Any


class InvalidJobIdException(RootModel[Any]):
    root: Any


class InvalidKMSKeyException(RootModel[Any]):
    root: Any


class InvalidParameterException(RootModel[Any]):
    root: Any


class InvalidS3ObjectException(RootModel[Any]):
    root: Any


class JobId(
    RootModel[constr(pattern=r'^[a-zA-Z0-9-_]+$', min_length=1, max_length=64)]
):
    root: constr(pattern=r'^[a-zA-Z0-9-_]+$', min_length=1, max_length=64)


class JobStatus(Enum):
    IN_PROGRESS = 'IN_PROGRESS'
    SUCCEEDED = 'SUCCEEDED'
    FAILED = 'FAILED'
    PARTIAL_SUCCESS = 'PARTIAL_SUCCESS'


class JobTag(
    RootModel[constr(pattern=r'[a-zA-Z0-9_.\-:]+', min_length=1, max_length=64)]
):
    root: constr(pattern=r'[a-zA-Z0-9_.\-:]+', min_length=1, max_length=64)


class KMSKeyId(
    RootModel[
        constr(
            pattern=r'^[A-Za-z0-9][A-Za-z0-9:_/+=,@.-]{0,2048}$',
            min_length=1,
            max_length=2048,
        )
    ]
):
    root: constr(
        pattern=r'^[A-Za-z0-9][A-Za-z0-9:_/+=,@.-]{0,2048}$',
        min_length=1,
        max_length=2048,
    )


class LimitExceededException(RootModel[Any]):
    root: Any


class MaxResults(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class NonEmptyString(RootModel[constr(pattern=r'.*\S.*')]):
    root: constr(pattern=r'.*\S.*')


class PaginationToken(
    RootModel[constr(pattern=r'.*\S.*', min_length=1, max_length=255)]
):
    root: constr(pattern=r'.*\S.*', min_length=1, max_length=255)


class Percent(RootModel[confloat(ge=0.0, le=100.0)]):
    root: confloat(ge=0.0, le=100.0)


class Point(BaseModel):
    X: Optional[Float] = None
    Y: Optional[Float] = None


class Polygon(RootModel[List[Point]]):
    root: List[Point]


class Prediction(BaseModel):
    Confidence: Optional[Percent] = None
    Value: Optional[NonEmptyString] = None


class PredictionList(RootModel[List[Prediction]]):
    root: List[Prediction]


class ProvisionedThroughputExceededException(RootModel[Any]):
    root: Any


class QueryInput(
    RootModel[
        constr(
            pattern=r'^[a-zA-Z0-9\s!"\#\$%\'&\(\)\*\+\,\-\./:;=\?@\[\\\]\^_`\{\|\}~><]+$',
            min_length=1,
            max_length=200,
        )
    ]
):
    root: constr(
        pattern=r'^[a-zA-Z0-9\s!"\#\$%\'&\(\)\*\+\,\-\./:;=\?@\[\\\]\^_`\{\|\}~><]+$',
        min_length=1,
        max_length=200,
    )


class QueryPage(RootModel[constr(pattern=r'^[0-9\*\-]+$', min_length=1, max_length=9)]):
    root: constr(pattern=r'^[0-9\*\-]+$', min_length=1, max_length=9)


class QueryPages(RootModel[List[QueryPage]]):
    root: List[QueryPage] = Field(..., min_length=1)


class RelationshipType(Enum):
    VALUE = 'VALUE'
    CHILD = 'CHILD'
    COMPLEX_FEATURES = 'COMPLEX_FEATURES'
    MERGED_CELL = 'MERGED_CELL'
    TITLE = 'TITLE'
    ANSWER = 'ANSWER'
    TABLE = 'TABLE'
    TABLE_TITLE = 'TABLE_TITLE'
    TABLE_FOOTER = 'TABLE_FOOTER'


class RoleArn(
    RootModel[
        constr(
            pattern=r'arn:([a-z\d-]+):iam::\d{12}:role/?[a-zA-Z_0-9+=,.@\-_/]+',
            min_length=20,
            max_length=2048,
        )
    ]
):
    root: constr(
        pattern=r'arn:([a-z\d-]+):iam::\d{12}:role/?[a-zA-Z_0-9+=,.@\-_/]+',
        min_length=20,
        max_length=2048,
    )


class S3Bucket(
    RootModel[constr(pattern=r'[0-9A-Za-z\.\-_]*', min_length=3, max_length=255)]
):
    root: constr(pattern=r'[0-9A-Za-z\.\-_]*', min_length=3, max_length=255)


class S3ObjectName(RootModel[constr(pattern=r'.*\S.*', min_length=1, max_length=1024)]):
    root: constr(pattern=r'.*\S.*', min_length=1, max_length=1024)


class S3ObjectVersion(
    RootModel[constr(pattern=r'.*\S.*', min_length=1, max_length=1024)]
):
    root: constr(pattern=r'.*\S.*', min_length=1, max_length=1024)


class SNSTopicArn(
    RootModel[
        constr(
            pattern=r'(^arn:([a-z\d-]+):sns:[a-zA-Z\d-]{1,20}:\w{12}:.+$)',
            min_length=20,
            max_length=1024,
        )
    ]
):
    root: constr(
        pattern=r'(^arn:([a-z\d-]+):sns:[a-zA-Z\d-]{1,20}:\w{12}:.+$)',
        min_length=20,
        max_length=1024,
    )


class SelectionStatus(Enum):
    SELECTED = 'SELECTED'
    NOT_SELECTED = 'NOT_SELECTED'


class StartDocumentAnalysisResponse(BaseModel):
    JobId_1: Optional[JobId] = Field(None, alias='JobId')


class StartDocumentTextDetectionResponse(BaseModel):
    JobId_1: Optional[JobId] = Field(None, alias='JobId')


class StartExpenseAnalysisResponse(BaseModel):
    JobId_1: Optional[JobId] = Field(None, alias='JobId')


class StartLendingAnalysisResponse(BaseModel):
    JobId_1: Optional[JobId] = Field(None, alias='JobId')


class StatusMessage(RootModel[str]):
    root: str


class String(RootModel[str]):
    root: str


class StringList(RootModel[List[String]]):
    root: List[String]


class TextType(Enum):
    HANDWRITING = 'HANDWRITING'
    PRINTED = 'PRINTED'


class ThrottlingException(RootModel[Any]):
    root: Any


class UInteger(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class UndetectedDocumentTypeList(RootModel[List[NonEmptyString]]):
    root: List[NonEmptyString]


class UndetectedSignature(BaseModel):
    Page: Optional[UInteger] = None


class UndetectedSignatureList(RootModel[List[UndetectedSignature]]):
    root: List[UndetectedSignature]


class UnsupportedDocumentException(RootModel[Any]):
    root: Any


class ValueType(Enum):
    DATE = 'DATE'


class XAmzTarget(Enum):
    Textract_AnalyzeDocument = 'Textract.AnalyzeDocument'


class XAmzTarget1(Enum):
    Textract_AnalyzeExpense = 'Textract.AnalyzeExpense'


class XAmzTarget2(Enum):
    Textract_AnalyzeID = 'Textract.AnalyzeID'


class XAmzTarget3(Enum):
    Textract_DetectDocumentText = 'Textract.DetectDocumentText'


class XAmzTarget4(Enum):
    Textract_GetDocumentAnalysis = 'Textract.GetDocumentAnalysis'


class XAmzTarget5(Enum):
    Textract_GetDocumentTextDetection = 'Textract.GetDocumentTextDetection'


class XAmzTarget6(Enum):
    Textract_GetExpenseAnalysis = 'Textract.GetExpenseAnalysis'


class XAmzTarget7(Enum):
    Textract_GetLendingAnalysis = 'Textract.GetLendingAnalysis'


class XAmzTarget8(Enum):
    Textract_GetLendingAnalysisSummary = 'Textract.GetLendingAnalysisSummary'


class XAmzTarget9(Enum):
    Textract_StartDocumentAnalysis = 'Textract.StartDocumentAnalysis'


class XAmzTarget10(Enum):
    Textract_StartDocumentTextDetection = 'Textract.StartDocumentTextDetection'


class XAmzTarget11(Enum):
    Textract_StartExpenseAnalysis = 'Textract.StartExpenseAnalysis'


class XAmzTarget12(Enum):
    Textract_StartLendingAnalysis = 'Textract.StartLendingAnalysis'


class BoundingBox(BaseModel):
    Height: Optional[Float] = None
    Left: Optional[Float] = None
    Top: Optional[Float] = None
    Width: Optional[Float] = None


class DetectedSignature(BaseModel):
    Page: Optional[UInteger] = None


class DetectedSignatureList(RootModel[List[DetectedSignature]]):
    root: List[DetectedSignature]


class DocumentMetadata(BaseModel):
    Pages: Optional[UInteger] = None


class ExpenseCurrency(BaseModel):
    Code: Optional[String] = None
    Confidence: Optional[Percent] = None


class ExpenseGroupProperty(BaseModel):
    Id: Optional[String] = None
    Types: Optional[StringList] = None


class ExpenseGroupPropertyList(RootModel[List[ExpenseGroupProperty]]):
    root: List[ExpenseGroupProperty]


class ExpenseType(BaseModel):
    Confidence: Optional[Percent] = None
    Text: Optional[String] = None


class Geometry(BaseModel):
    BoundingBox_1: Optional[BoundingBox] = Field(None, alias='BoundingBox')
    Polygon_1: Optional[Polygon] = Field(None, alias='Polygon')


class GetDocumentAnalysisRequest(BaseModel):
    JobId_1: JobId = Field(..., alias='JobId')
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken: Optional[PaginationToken] = None


class GetDocumentTextDetectionRequest(BaseModel):
    JobId_1: JobId = Field(..., alias='JobId')
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken: Optional[PaginationToken] = None


class GetExpenseAnalysisRequest(BaseModel):
    JobId_1: JobId = Field(..., alias='JobId')
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken: Optional[PaginationToken] = None


class GetLendingAnalysisRequest(BaseModel):
    JobId_1: JobId = Field(..., alias='JobId')
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken: Optional[PaginationToken] = None


class GetLendingAnalysisSummaryRequest(BaseModel):
    JobId_1: JobId = Field(..., alias='JobId')


class HumanLoopActivationOutput(BaseModel):
    HumanLoopActivationConditionsEvaluationResults_1: Optional[
        HumanLoopActivationConditionsEvaluationResults
    ] = Field(None, alias='HumanLoopActivationConditionsEvaluationResults')
    HumanLoopActivationReasons_1: Optional[HumanLoopActivationReasons] = Field(
        None, alias='HumanLoopActivationReasons'
    )
    HumanLoopArn_1: Optional[HumanLoopArn] = Field(None, alias='HumanLoopArn')


class HumanLoopConfig(BaseModel):
    DataAttributes: Optional[HumanLoopDataAttributes] = None
    FlowDefinitionArn_1: FlowDefinitionArn = Field(..., alias='FlowDefinitionArn')
    HumanLoopName_1: HumanLoopName = Field(..., alias='HumanLoopName')


class IdList(RootModel[List[NonEmptyString]]):
    root: List[NonEmptyString]


class LendingDetection(BaseModel):
    Confidence: Optional[Percent] = None
    Geometry_1: Optional[Geometry] = Field(None, alias='Geometry')
    SelectionStatus_1: Optional[SelectionStatus] = Field(None, alias='SelectionStatus')
    Text: Optional[String] = None


class LendingDetectionList(RootModel[List[LendingDetection]]):
    root: List[LendingDetection]


class LendingField(BaseModel):
    KeyDetection: Optional[LendingDetection] = None
    Type: Optional[String] = None
    ValueDetections: Optional[LendingDetectionList] = None


class LendingFieldList(RootModel[List[LendingField]]):
    root: List[LendingField]


class NormalizedValue(BaseModel):
    Value: Optional[String] = None
    ValueType_1: Optional[ValueType] = Field(None, alias='ValueType')


class NotificationChannel(BaseModel):
    RoleArn_1: RoleArn = Field(..., alias='RoleArn')
    SNSTopicArn_1: SNSTopicArn = Field(..., alias='SNSTopicArn')


class OutputConfig(BaseModel):
    S3Bucket_1: S3Bucket = Field(..., alias='S3Bucket')
    S3Prefix: Optional[S3ObjectName] = None


class PageClassification(BaseModel):
    PageNumber: PredictionList
    PageType: PredictionList


class PageList(RootModel[List[UInteger]]):
    root: List[UInteger]


class Pages(RootModel[List[UInteger]]):
    root: List[UInteger]


class Query(BaseModel):
    Alias: Optional[QueryInput] = None
    Pages: Optional[QueryPages] = None
    Text: QueryInput


class Relationship(BaseModel):
    Ids: Optional[IdList] = None
    Type: Optional[RelationshipType] = None


class RelationshipList(RootModel[List[Relationship]]):
    root: List[Relationship]


class S3Object(BaseModel):
    Bucket: Optional[S3Bucket] = None
    Name: Optional[S3ObjectName] = None
    Version: Optional[S3ObjectVersion] = None


class SignatureDetection(BaseModel):
    Confidence: Optional[Percent] = None
    Geometry_1: Optional[Geometry] = Field(None, alias='Geometry')


class SignatureDetectionList(RootModel[List[SignatureDetection]]):
    root: List[SignatureDetection]


class SplitDocument(BaseModel):
    Index: Optional[UInteger] = None
    Pages: Optional[PageList] = None


class SplitDocumentList(RootModel[List[SplitDocument]]):
    root: List[SplitDocument]


class Warning(BaseModel):
    ErrorCode_1: Optional[ErrorCode] = Field(None, alias='ErrorCode')
    Pages_1: Optional[Pages] = Field(None, alias='Pages')


class Warnings(RootModel[List[Warning]]):
    root: List[Warning]


class AnalyzeIDDetections(BaseModel):
    Confidence: Optional[Percent] = None
    NormalizedValue_1: Optional[NormalizedValue] = Field(None, alias='NormalizedValue')
    Text: String


class Block(BaseModel):
    BlockType_1: Optional[BlockType] = Field(None, alias='BlockType')
    ColumnIndex: Optional[UInteger] = None
    ColumnSpan: Optional[UInteger] = None
    Confidence: Optional[Percent] = None
    EntityTypes_1: Optional[EntityTypes] = Field(None, alias='EntityTypes')
    Geometry_1: Optional[Geometry] = Field(None, alias='Geometry')
    Id: Optional[NonEmptyString] = None
    Page: Optional[UInteger] = None
    Query_1: Optional[Query] = Field(None, alias='Query')
    Relationships: Optional[RelationshipList] = None
    RowIndex: Optional[UInteger] = None
    RowSpan: Optional[UInteger] = None
    SelectionStatus_1: Optional[SelectionStatus] = Field(None, alias='SelectionStatus')
    Text: Optional[String] = None
    TextType_1: Optional[TextType] = Field(None, alias='TextType')


class BlockList(RootModel[List[Block]]):
    root: List[Block]


class DetectDocumentTextResponse(BaseModel):
    Blocks: Optional[BlockList] = None
    DetectDocumentTextModelVersion: Optional[String] = None
    DocumentMetadata_1: Optional[DocumentMetadata] = Field(
        None, alias='DocumentMetadata'
    )


class Document(BaseModel):
    Bytes: Optional[ImageBlob] = None
    S3Object_1: Optional[S3Object] = Field(None, alias='S3Object')


class DocumentGroup(BaseModel):
    DetectedSignatures: Optional[DetectedSignatureList] = None
    SplitDocuments: Optional[SplitDocumentList] = None
    Type: Optional[NonEmptyString] = None
    UndetectedSignatures: Optional[UndetectedSignatureList] = None


class DocumentGroupList(RootModel[List[DocumentGroup]]):
    root: List[DocumentGroup]


class DocumentLocation(BaseModel):
    S3Object_1: Optional[S3Object] = Field(None, alias='S3Object')


class DocumentPages(RootModel[List[Document]]):
    root: List[Document] = Field(..., max_length=2, min_length=1)


class ExpenseDetection(BaseModel):
    Confidence: Optional[Percent] = None
    Geometry_1: Optional[Geometry] = Field(None, alias='Geometry')
    Text: Optional[String] = None


class ExpenseField(BaseModel):
    Currency: Optional[ExpenseCurrency] = None
    GroupProperties: Optional[ExpenseGroupPropertyList] = None
    LabelDetection: Optional[ExpenseDetection] = None
    PageNumber: Optional[UInteger] = None
    Type: Optional[ExpenseType] = None
    ValueDetection: Optional[ExpenseDetection] = None


class ExpenseFieldList(RootModel[List[ExpenseField]]):
    root: List[ExpenseField]


class GetDocumentAnalysisResponse(BaseModel):
    AnalyzeDocumentModelVersion: Optional[String] = None
    Blocks: Optional[BlockList] = None
    DocumentMetadata_1: Optional[DocumentMetadata] = Field(
        None, alias='DocumentMetadata'
    )
    JobStatus_1: Optional[JobStatus] = Field(None, alias='JobStatus')
    NextToken: Optional[PaginationToken] = None
    StatusMessage_1: Optional[StatusMessage] = Field(None, alias='StatusMessage')
    Warnings_1: Optional[Warnings] = Field(None, alias='Warnings')


class GetDocumentTextDetectionResponse(BaseModel):
    Blocks: Optional[BlockList] = None
    DetectDocumentTextModelVersion: Optional[String] = None
    DocumentMetadata_1: Optional[DocumentMetadata] = Field(
        None, alias='DocumentMetadata'
    )
    JobStatus_1: Optional[JobStatus] = Field(None, alias='JobStatus')
    NextToken: Optional[PaginationToken] = None
    StatusMessage_1: Optional[StatusMessage] = Field(None, alias='StatusMessage')
    Warnings_1: Optional[Warnings] = Field(None, alias='Warnings')


class IdentityDocumentField(BaseModel):
    Type: Optional[AnalyzeIDDetections] = None
    ValueDetection: Optional[AnalyzeIDDetections] = None


class IdentityDocumentFieldList(RootModel[List[IdentityDocumentField]]):
    root: List[IdentityDocumentField]


class LendingDocument(BaseModel):
    LendingFields: Optional[LendingFieldList] = None
    SignatureDetections: Optional[SignatureDetectionList] = None


class LendingSummary(BaseModel):
    DocumentGroups: Optional[DocumentGroupList] = None
    UndetectedDocumentTypes: Optional[UndetectedDocumentTypeList] = None


class LineItemFields(BaseModel):
    LineItemExpenseFields: Optional[ExpenseFieldList] = None


class LineItemList(RootModel[List[LineItemFields]]):
    root: List[LineItemFields]


class Queries(RootModel[List[Query]]):
    root: List[Query] = Field(..., min_length=1)


class QueriesConfig(BaseModel):
    Queries_1: Queries = Field(..., alias='Queries')


class StartDocumentAnalysisRequest(BaseModel):
    ClientRequestToken_1: Optional[ClientRequestToken] = Field(
        None, alias='ClientRequestToken'
    )
    DocumentLocation_1: DocumentLocation = Field(..., alias='DocumentLocation')
    FeatureTypes_1: FeatureTypes = Field(..., alias='FeatureTypes')
    JobTag_1: Optional[JobTag] = Field(None, alias='JobTag')
    KMSKeyId_1: Optional[KMSKeyId] = Field(None, alias='KMSKeyId')
    NotificationChannel_1: Optional[NotificationChannel] = Field(
        None, alias='NotificationChannel'
    )
    OutputConfig_1: Optional[OutputConfig] = Field(None, alias='OutputConfig')
    QueriesConfig_1: Optional[QueriesConfig] = Field(None, alias='QueriesConfig')


class StartDocumentTextDetectionRequest(BaseModel):
    ClientRequestToken_1: Optional[ClientRequestToken] = Field(
        None, alias='ClientRequestToken'
    )
    DocumentLocation_1: DocumentLocation = Field(..., alias='DocumentLocation')
    JobTag_1: Optional[JobTag] = Field(None, alias='JobTag')
    KMSKeyId_1: Optional[KMSKeyId] = Field(None, alias='KMSKeyId')
    NotificationChannel_1: Optional[NotificationChannel] = Field(
        None, alias='NotificationChannel'
    )
    OutputConfig_1: Optional[OutputConfig] = Field(None, alias='OutputConfig')


class StartExpenseAnalysisRequest(BaseModel):
    ClientRequestToken_1: Optional[ClientRequestToken] = Field(
        None, alias='ClientRequestToken'
    )
    DocumentLocation_1: DocumentLocation = Field(..., alias='DocumentLocation')
    JobTag_1: Optional[JobTag] = Field(None, alias='JobTag')
    KMSKeyId_1: Optional[KMSKeyId] = Field(None, alias='KMSKeyId')
    NotificationChannel_1: Optional[NotificationChannel] = Field(
        None, alias='NotificationChannel'
    )
    OutputConfig_1: Optional[OutputConfig] = Field(None, alias='OutputConfig')


class StartLendingAnalysisRequest(BaseModel):
    ClientRequestToken_1: Optional[ClientRequestToken] = Field(
        None, alias='ClientRequestToken'
    )
    DocumentLocation_1: DocumentLocation = Field(..., alias='DocumentLocation')
    JobTag_1: Optional[JobTag] = Field(None, alias='JobTag')
    KMSKeyId_1: Optional[KMSKeyId] = Field(None, alias='KMSKeyId')
    NotificationChannel_1: Optional[NotificationChannel] = Field(
        None, alias='NotificationChannel'
    )
    OutputConfig_1: Optional[OutputConfig] = Field(None, alias='OutputConfig')


class AnalyzeDocumentRequest(BaseModel):
    Document_1: Document = Field(..., alias='Document')
    FeatureTypes_1: FeatureTypes = Field(..., alias='FeatureTypes')
    HumanLoopConfig_1: Optional[HumanLoopConfig] = Field(None, alias='HumanLoopConfig')
    QueriesConfig_1: Optional[QueriesConfig] = Field(None, alias='QueriesConfig')


class AnalyzeDocumentResponse(BaseModel):
    AnalyzeDocumentModelVersion: Optional[String] = None
    Blocks: Optional[BlockList] = None
    DocumentMetadata_1: Optional[DocumentMetadata] = Field(
        None, alias='DocumentMetadata'
    )
    HumanLoopActivationOutput_1: Optional[HumanLoopActivationOutput] = Field(
        None, alias='HumanLoopActivationOutput'
    )


class AnalyzeExpenseRequest(BaseModel):
    Document_1: Document = Field(..., alias='Document')


class AnalyzeIDRequest(BaseModel):
    DocumentPages_1: DocumentPages = Field(..., alias='DocumentPages')


class DetectDocumentTextRequest(BaseModel):
    Document_1: Document = Field(..., alias='Document')


class GetLendingAnalysisSummaryResponse(BaseModel):
    AnalyzeLendingModelVersion: Optional[String] = None
    DocumentMetadata_1: Optional[DocumentMetadata] = Field(
        None, alias='DocumentMetadata'
    )
    JobStatus_1: Optional[JobStatus] = Field(None, alias='JobStatus')
    StatusMessage_1: Optional[StatusMessage] = Field(None, alias='StatusMessage')
    Summary: Optional[LendingSummary] = None
    Warnings_1: Optional[Warnings] = Field(None, alias='Warnings')


class IdentityDocument(BaseModel):
    Blocks: Optional[BlockList] = None
    DocumentIndex: Optional[UInteger] = None
    IdentityDocumentFields: Optional[IdentityDocumentFieldList] = None


class IdentityDocumentList(RootModel[List[IdentityDocument]]):
    root: List[IdentityDocument]


class LineItemGroup(BaseModel):
    LineItemGroupIndex: Optional[UInteger] = None
    LineItems: Optional[LineItemList] = None


class LineItemGroupList(RootModel[List[LineItemGroup]]):
    root: List[LineItemGroup]


class AnalyzeIDResponse(BaseModel):
    AnalyzeIDModelVersion: Optional[String] = None
    DocumentMetadata_1: Optional[DocumentMetadata] = Field(
        None, alias='DocumentMetadata'
    )
    IdentityDocuments: Optional[IdentityDocumentList] = None


class ExpenseDocument(BaseModel):
    Blocks: Optional[BlockList] = None
    ExpenseIndex: Optional[UInteger] = None
    LineItemGroups: Optional[LineItemGroupList] = None
    SummaryFields: Optional[ExpenseFieldList] = None


class ExpenseDocumentList(RootModel[List[ExpenseDocument]]):
    root: List[ExpenseDocument]


class Extraction(BaseModel):
    ExpenseDocument_1: Optional[ExpenseDocument] = Field(None, alias='ExpenseDocument')
    IdentityDocument_1: Optional[IdentityDocument] = Field(
        None, alias='IdentityDocument'
    )
    LendingDocument_1: Optional[LendingDocument] = Field(None, alias='LendingDocument')


class ExtractionList(RootModel[List[Extraction]]):
    root: List[Extraction]


class GetExpenseAnalysisResponse(BaseModel):
    AnalyzeExpenseModelVersion: Optional[String] = None
    DocumentMetadata_1: Optional[DocumentMetadata] = Field(
        None, alias='DocumentMetadata'
    )
    ExpenseDocuments: Optional[ExpenseDocumentList] = None
    JobStatus_1: Optional[JobStatus] = Field(None, alias='JobStatus')
    NextToken: Optional[PaginationToken] = None
    StatusMessage_1: Optional[StatusMessage] = Field(None, alias='StatusMessage')
    Warnings_1: Optional[Warnings] = Field(None, alias='Warnings')


class LendingResult(BaseModel):
    Extractions: Optional[ExtractionList] = None
    Page: Optional[UInteger] = None
    PageClassification_1: Optional[PageClassification] = Field(
        None, alias='PageClassification'
    )


class LendingResultList(RootModel[List[LendingResult]]):
    root: List[LendingResult]


class AnalyzeExpenseResponse(BaseModel):
    DocumentMetadata_1: Optional[DocumentMetadata] = Field(
        None, alias='DocumentMetadata'
    )
    ExpenseDocuments: Optional[ExpenseDocumentList] = None


class GetLendingAnalysisResponse(BaseModel):
    AnalyzeLendingModelVersion: Optional[String] = None
    DocumentMetadata_1: Optional[DocumentMetadata] = Field(
        None, alias='DocumentMetadata'
    )
    JobStatus_1: Optional[JobStatus] = Field(None, alias='JobStatus')
    NextToken: Optional[PaginationToken] = None
    Results: Optional[LendingResultList] = None
    StatusMessage_1: Optional[StatusMessage] = Field(None, alias='StatusMessage')
    Warnings_1: Optional[Warnings] = Field(None, alias='Warnings')
